{
  "ver": "1.0.27",
  "uuid": "315f34cf-c10c-4210-933b-1eb028251748",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nvarying vec2 v_uv0;\nvarying vec4 v_color;\n#if USE_TEXTURE\n  uniform sampler2D texture;\n#endif\nuniform vec2 size;\nuniform vec2 leftTop;\nuniform vec2 rightTop;\nuniform vec2 rightBottom;\nuniform vec2 leftBottom;\nfloat inEllipse(vec2 origin, float radius_a, float radius_b, vec2 coordinate) {\n  coordinate.x -= origin.x;\n  coordinate.y -= origin.y;\n  return pow(coordinate.x, 2.0) / pow(radius_a, 2.0) + pow(coordinate.y, 2.0) / pow(radius_b, 2.0);\n}\nvoid main () {\n  vec4 color = v_color;\n  color *= texture2D(texture, v_uv0);\n  vec2 uv = vec2(v_uv0.x, 1.0 - v_uv0.y);\n  uv.xy *= size.xy;\n  if(uv.x < leftTop.x && uv.y > size.y - leftTop.y) {\n    if(inEllipse(vec2(leftTop.x, size.y - leftTop.y), leftTop.x, leftTop.y, uv) > 1.0) {\n      color.a = 0.0;\n    };\n  }\n  if(uv.x > size.x - rightTop.x && uv.y > size.y - rightTop.y) {\n    if(inEllipse(vec2(size.x - rightTop.x, size.y - rightTop.y), rightTop.x, rightTop.y, uv) > 1.0) {\n      color.a = 0.0;\n    };\n  }\n  if(uv.x > size.x - rightBottom.x && uv.y < rightBottom.y) {\n    if(inEllipse(vec2(size.x - rightBottom.x, rightBottom.y), rightBottom.x, rightBottom.y, uv) > 1.0) {\n      color.a = 0.0;\n    };\n  }\n  if(uv.x < leftBottom.x && uv.y < leftBottom.y) {\n    if(inEllipse(vec2(leftBottom.x, leftBottom.y), leftBottom.x, leftBottom.y, uv) > 1.0) {\n      color.a = 0.0;\n    };\n  }\n  color.a *= v_color.a;\n  gl_FragColor = color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nin vec2 v_uv0;\nin vec4 v_color;\n#if USE_TEXTURE\n  uniform sampler2D texture;\n#endif\nuniform Properties {\n  vec2 size;\n  vec2 leftTop;\n  vec2 rightTop;\n  vec2 rightBottom;\n  vec2 leftBottom;\n};\nfloat inEllipse(vec2 origin, float radius_a, float radius_b, vec2 coordinate) {\n  coordinate.x -= origin.x;\n  coordinate.y -= origin.y;\n  return pow(coordinate.x, 2.0) / pow(radius_a, 2.0) + pow(coordinate.y, 2.0) / pow(radius_b, 2.0);\n}\nvoid main () {\n  vec4 color = v_color;\n  color *= texture(texture, v_uv0);\n  vec2 uv = vec2(v_uv0.x, 1.0 - v_uv0.y);\n  uv.xy *= size.xy;\n  if(uv.x < leftTop.x && uv.y > size.y - leftTop.y) {\n    if(inEllipse(vec2(leftTop.x, size.y - leftTop.y), leftTop.x, leftTop.y, uv) > 1.0) {\n      color.a = 0.0;\n    };\n  }\n  if(uv.x > size.x - rightTop.x && uv.y > size.y - rightTop.y) {\n    if(inEllipse(vec2(size.x - rightTop.x, size.y - rightTop.y), rightTop.x, rightTop.y, uv) > 1.0) {\n      color.a = 0.0;\n    };\n  }\n  if(uv.x > size.x - rightBottom.x && uv.y < rightBottom.y) {\n    if(inEllipse(vec2(size.x - rightBottom.x, rightBottom.y), rightBottom.x, rightBottom.y, uv) > 1.0) {\n      color.a = 0.0;\n    };\n  }\n  if(uv.x < leftBottom.x && uv.y < leftBottom.y) {\n    if(inEllipse(vec2(leftBottom.x, leftBottom.y), leftBottom.x, leftBottom.y, uv) > 1.0) {\n      color.a = 0.0;\n    };\n  }\n  color.a *= v_color.a;\n  gl_FragColor = color;\n}"
      }
    }
  ],
  "subMetas": {}
}