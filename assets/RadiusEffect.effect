// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        size: { value: [0, 0], editor: { tooltip: "图片尺寸" } }
        leftTop: { value: [0, 0], editor: { tooltip: "左上角，第一个数为水平方向" } }
        rightTop: { value: [0, 0], editor: { tooltip: "右上角，第一个数为水平方向" } }
        rightBottom: { value: [0, 0], editor: { tooltip: "右下角，第一个数为水平方向" } }
        leftBottom: { value: [0, 0], editor: { tooltip: "左下角，第一个数为水平方向" } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  in vec2 v_uv0;
  in vec4 v_color;

  #if USE_TEXTURE
    uniform sampler2D texture;
  #endif

  uniform Properties {
    vec2 size;
    vec2 leftTop;
    vec2 rightTop;
    vec2 rightBottom;
    vec2 leftBottom;
  };

  float inEllipse(vec2 origin, float radius_a, float radius_b, vec2 coordinate) {
    // 转换坐标
    coordinate.x -= origin.x;
    coordinate.y -= origin.y;
    // 圆锥曲线
    return pow(coordinate.x, 2.0) / pow(radius_a, 2.0) + pow(coordinate.y, 2.0) / pow(radius_b, 2.0);
  }

  void main () {
    vec4 color = v_color;

    color *= texture(texture, v_uv0);

    // 转换坐标原点到左下角
    vec2 uv = vec2(v_uv0.x, 1.0 - v_uv0.y);

    // 转换坐标到实际尺寸大小
    uv.xy *= size.xy;

    // 处理左上角
    if(uv.x < leftTop.x && uv.y > size.y - leftTop.y) {
      if(inEllipse(vec2(leftTop.x, size.y - leftTop.y), leftTop.x, leftTop.y, uv) > 1.0) {
        color.a = 0.0;
      };
    }

    // 右上角
    if(uv.x > size.x - rightTop.x && uv.y > size.y - rightTop.y) {
      if(inEllipse(vec2(size.x - rightTop.x, size.y - rightTop.y), rightTop.x, rightTop.y, uv) > 1.0) {
        color.a = 0.0;
      };
    }

    // 右下角
    if(uv.x > size.x - rightBottom.x && uv.y < rightBottom.y) {
      if(inEllipse(vec2(size.x - rightBottom.x, rightBottom.y), rightBottom.x, rightBottom.y, uv) > 1.0) {
        color.a = 0.0;
      };
    }

    // 左下角
    if(uv.x < leftBottom.x && uv.y < leftBottom.y) {
      if(inEllipse(vec2(leftBottom.x, leftBottom.y), leftBottom.x, leftBottom.y, uv) > 1.0) {
        color.a = 0.0;
      };
    }

    color.a *= v_color.a;
    gl_FragColor = color;
  }
}%
